// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

// CreateUser defines model for CreateUser.
type CreateUser struct {
	// Password password
	Password string `json:"password"`

	// Username username
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	// Code response code
	Code int64 `json:"code"`

	// Data return error id (default is -1)
	Data int64 `json:"data"`

	// Error error information
	Error string `json:"error"`

	// Message response message
	Message string `json:"message"`

	// Reference give how to handle the response or error url externally
	Reference string `json:"reference"`
}

// GetTask defines model for GetTask.
type GetTask struct {
	// Code response code
	Code int64 `json:"code"`

	// Data return data list
	Data []Task `json:"data"`

	// Error error information
	Error string `json:"error"`

	// Message response message
	Message string `json:"message"`

	// Reference give how to handle the response or error url externally
	Reference string `json:"reference"`
}

// GetTaskType defines model for GetTaskType.
type GetTaskType struct {
	// Code response code
	Code int64 `json:"code"`

	// Data return data list
	Data []TaskType `json:"data"`

	// Error error information
	Error string `json:"error"`

	// Message response message
	Message string `json:"message"`

	// Reference give how to handle the response or error url externally
	Reference string `json:"reference"`
}

// GetToken defines model for GetToken.
type GetToken struct {
	// Code response code
	Code int64 `json:"code"`

	// Data return data list
	Data []Token `json:"data"`

	// Error error information
	Error string `json:"error"`

	// Message response message
	Message string `json:"message"`

	// Reference give how to handle the response or error url externally
	Reference string `json:"reference"`
}

// GetUser defines model for GetUser.
type GetUser struct {
	// Code response code
	Code int64 `json:"code"`

	// Data return data list
	Data []User `json:"data"`

	// Error error information
	Error string `json:"error"`

	// Message response message
	Message string `json:"message"`

	// Reference give how to handle the response or error url externally
	Reference string `json:"reference"`
}

// NewTask defines model for NewTask.
type NewTask struct {
	// CreateAt task create time
	CreateAt string `json:"createAt"`

	// CronSpec cron spec, for example * * * * * or 30s
	CronSpec string `json:"cronSpec"`

	// Event store task execution results
	Event string `json:"event"`

	// Kind mark the resource type as task
	Kind string `json:"kind"`

	// Mode task mode (once or periodic)
	Mode string `json:"mode"`

	// Name task name
	Name string `json:"name"`

	// Payload parameters required when running a task
	Payload string `json:"payload"`

	// Result whether the task was successfully executed
	Result bool `json:"result"`

	// TaskType the task type to which the task belongs
	TaskType string `json:"taskType"`

	// UpdateAt task update time
	UpdateAt string `json:"updateAt"`
}

// NewTaskType defines model for NewTaskType.
type NewTaskType struct {
	// Kind mark the resource type as task type
	Kind string `json:"kind"`

	// Name task type name
	Name string `json:"name"`
}

// ResponseFormat defines model for ResponseFormat.
type ResponseFormat struct {
	// Code response code
	Code int64 `json:"code"`

	// Error error information
	Error string `json:"error"`

	// Message response message
	Message string `json:"message"`

	// Reference give how to handle the response or error url externally
	Reference string `json:"reference"`
}

// Task defines model for Task.
type Task struct {
	// CreateAt task create time
	CreateAt string `json:"createAt"`

	// CronSpec cron spec, for example * * * * * or 30s
	CronSpec string `json:"cronSpec"`

	// Event store task execution results
	Event string `json:"event"`

	// Id Unique id of the task
	Id int64 `json:"id"`

	// Kind mark the resource type as task
	Kind string `json:"kind"`

	// Mode task mode (once or periodic)
	Mode string `json:"mode"`

	// Name task name
	Name string `json:"name"`

	// Payload parameters required when running a task
	Payload string `json:"payload"`

	// Result whether the task was successfully executed
	Result bool `json:"result"`

	// TaskType the task type to which the task belongs
	TaskType string `json:"taskType"`

	// UpdateAt task update time
	UpdateAt string `json:"updateAt"`
}

// TaskType defines model for TaskType.
type TaskType struct {
	// Id Unique id of the task type
	Id int64 `json:"id"`

	// Kind mark the resource type as task type
	Kind string `json:"kind"`

	// Name task type name
	Name string `json:"name"`
}

// Token defines model for Token.
type Token struct {
	// Token token
	Token string `json:"token"`

	// Username username
	Username string `json:"username"`
}

// User defines model for User.
type User struct {
	// Id Unique id of the user
	Id int64 `json:"id"`

	// Username username
	Username string `json:"username"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = CreateUser

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUser

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = NewTask

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = NewTask

// CreateTaskTypeJSONRequestBody defines body for CreateTaskType for application/json ContentType.
type CreateTaskTypeJSONRequestBody = NewTaskType
