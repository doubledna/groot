// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /api/login)
	LoginUser(c *gin.Context)
	// Register user
	// (POST /api/register)
	CreateUser(c *gin.Context)
	// Returns all task
	// (GET /api/v1/task)
	GetTask(c *gin.Context)
	// Create a new task
	// (POST /api/v1/task)
	CreateTask(c *gin.Context)
	// Create a new task
	// (PUT /api/v1/task)
	UpdateTask(c *gin.Context)
	// Returns a task by mode
	// (GET /api/v1/task/mode/{mode})
	GetTaskByMode(c *gin.Context, mode string)
	// Delete a task by name
	// (DELETE /api/v1/task/{name})
	DeleteTask(c *gin.Context, name string)
	// Returns a task by name
	// (GET /api/v1/task/{name})
	GetTaskByName(c *gin.Context, name string)
	// Returns all task type
	// (GET /api/v1/task_type)
	GetTaskType(c *gin.Context)
	// Create a new task type
	// (POST /api/v1/task_type)
	CreateTaskType(c *gin.Context)
	// Delete a task type by name
	// (DELETE /api/v1/task_type/{name})
	DeleteTaskType(c *gin.Context, name string)
	// Returns a task type by name
	// (GET /api/v1/task_type/{name})
	GetTaskTypeByName(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c)
}

// GetTaskByMode operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByMode(c *gin.Context) {

	var err error

	// ------------- Path parameter "mode" -------------
	var mode string

	err = runtime.BindStyledParameterWithOptions("simple", "mode", c.Param("mode"), &mode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mode: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByMode(c, mode)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTask(c, name)
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByName(c, name)
}

// GetTaskType operation middleware
func (siw *ServerInterfaceWrapper) GetTaskType(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskType(c)
}

// CreateTaskType operation middleware
func (siw *ServerInterfaceWrapper) CreateTaskType(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTaskType(c)
}

// DeleteTaskType operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskType(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTaskType(c, name)
}

// GetTaskTypeByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskTypeByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskTypeByName(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/api/register", wrapper.CreateUser)
	router.GET(options.BaseURL+"/api/v1/task", wrapper.GetTask)
	router.POST(options.BaseURL+"/api/v1/task", wrapper.CreateTask)
	router.PUT(options.BaseURL+"/api/v1/task", wrapper.UpdateTask)
	router.GET(options.BaseURL+"/api/v1/task/mode/:mode", wrapper.GetTaskByMode)
	router.DELETE(options.BaseURL+"/api/v1/task/:name", wrapper.DeleteTask)
	router.GET(options.BaseURL+"/api/v1/task/:name", wrapper.GetTaskByName)
	router.GET(options.BaseURL+"/api/v1/task_type", wrapper.GetTaskType)
	router.POST(options.BaseURL+"/api/v1/task_type", wrapper.CreateTaskType)
	router.DELETE(options.BaseURL+"/api/v1/task_type/:name", wrapper.DeleteTaskType)
	router.GET(options.BaseURL+"/api/v1/task_type/:name", wrapper.GetTaskTypeByName)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
