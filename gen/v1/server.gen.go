// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /api/v1/login)
	LoginUser(c *gin.Context)
	// Register user
	// (POST /api/v1/register)
	CreateUser(c *gin.Context)
	// Returns all task
	// (GET /api/v1/task)
	GetTask(c *gin.Context)
	// Create a new task
	// (POST /api/v1/task)
	CreateTask(c *gin.Context)
	// Create a new task
	// (PUT /api/v1/task)
	UpdateTask(c *gin.Context)
	// Returns a task by mode
	// (GET /api/v1/task/mode/{mode})
	GetTaskByMode(c *gin.Context, mode string)
	// Delete a task by name
	// (DELETE /api/v1/task/{name})
	DeleteTask(c *gin.Context, name string)
	// Returns a task by name
	// (GET /api/v1/task/{name})
	GetTaskByName(c *gin.Context, name string)
	// Returns all task type
	// (GET /api/v1/task_type)
	GetTaskType(c *gin.Context)
	// Create a new task type
	// (POST /api/v1/task_type)
	CreateTaskType(c *gin.Context)
	// Delete a task type by name
	// (DELETE /api/v1/task_type/{name})
	DeleteTaskType(c *gin.Context, name string)
	// Returns a task type by name
	// (GET /api/v1/task_type/{name})
	GetTaskTypeByName(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c)
}

// GetTaskByMode operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByMode(c *gin.Context) {

	var err error

	// ------------- Path parameter "mode" -------------
	var mode string

	err = runtime.BindStyledParameterWithOptions("simple", "mode", c.Param("mode"), &mode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mode: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByMode(c, mode)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTask(c, name)
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByName(c, name)
}

// GetTaskType operation middleware
func (siw *ServerInterfaceWrapper) GetTaskType(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskType(c)
}

// CreateTaskType operation middleware
func (siw *ServerInterfaceWrapper) CreateTaskType(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTaskType(c)
}

// DeleteTaskType operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskType(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTaskType(c, name)
}

// GetTaskTypeByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskTypeByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskTypeByName(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/api/v1/register", wrapper.CreateUser)
	router.GET(options.BaseURL+"/api/v1/task", wrapper.GetTask)
	router.POST(options.BaseURL+"/api/v1/task", wrapper.CreateTask)
	router.PUT(options.BaseURL+"/api/v1/task", wrapper.UpdateTask)
	router.GET(options.BaseURL+"/api/v1/task/mode/:mode", wrapper.GetTaskByMode)
	router.DELETE(options.BaseURL+"/api/v1/task/:name", wrapper.DeleteTask)
	router.GET(options.BaseURL+"/api/v1/task/:name", wrapper.GetTaskByName)
	router.GET(options.BaseURL+"/api/v1/task_type", wrapper.GetTaskType)
	router.POST(options.BaseURL+"/api/v1/task_type", wrapper.CreateTaskType)
	router.DELETE(options.BaseURL+"/api/v1/task_type/:name", wrapper.DeleteTaskType)
	router.GET(options.BaseURL+"/api/v1/task_type/:name", wrapper.GetTaskTypeByName)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
