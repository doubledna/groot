// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register user
	// (POST /api/v1/register)
	CreateUser(c *gin.Context)
	// Returns all task
	// (GET /api/v1/task)
	GetTask(c *gin.Context)
	// Create a new task
	// (POST /api/v1/task)
	CreateTask(c *gin.Context)
	// Create a new task
	// (PUT /api/v1/task)
	UpdateTask(c *gin.Context)
	// Returns a task by mode
	// (GET /api/v1/task/mode/{mode})
	GetTaskByMode(c *gin.Context, mode string)
	// Delete a task by name
	// (DELETE /api/v1/task/{name})
	DeleteTask(c *gin.Context, name string)
	// Returns a task by name
	// (GET /api/v1/task/{name})
	GetTaskByName(c *gin.Context, name string)
	// Returns all task type
	// (GET /api/v1/task_type)
	GetTaskType(c *gin.Context)
	// Create a new task type
	// (POST /api/v1/task_type)
	CreateTaskType(c *gin.Context)
	// Delete a task type by name
	// (DELETE /api/v1/task_type/{name})
	DeleteTaskType(c *gin.Context, name string)
	// Returns a task type by name
	// (GET /api/v1/task_type/{name})
	GetTaskTypeByName(c *gin.Context, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c)
}

// GetTaskByMode operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByMode(c *gin.Context) {

	var err error

	// ------------- Path parameter "mode" -------------
	var mode string

	err = runtime.BindStyledParameterWithOptions("simple", "mode", c.Param("mode"), &mode, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mode: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByMode(c, mode)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTask(c, name)
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskByName(c, name)
}

// GetTaskType operation middleware
func (siw *ServerInterfaceWrapper) GetTaskType(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskType(c)
}

// CreateTaskType operation middleware
func (siw *ServerInterfaceWrapper) CreateTaskType(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTaskType(c)
}

// DeleteTaskType operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskType(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTaskType(c, name)
}

// GetTaskTypeByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskTypeByName(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskTypeByName(c, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/register", wrapper.CreateUser)
	router.GET(options.BaseURL+"/api/v1/task", wrapper.GetTask)
	router.POST(options.BaseURL+"/api/v1/task", wrapper.CreateTask)
	router.PUT(options.BaseURL+"/api/v1/task", wrapper.UpdateTask)
	router.GET(options.BaseURL+"/api/v1/task/mode/:mode", wrapper.GetTaskByMode)
	router.DELETE(options.BaseURL+"/api/v1/task/:name", wrapper.DeleteTask)
	router.GET(options.BaseURL+"/api/v1/task/:name", wrapper.GetTaskByName)
	router.GET(options.BaseURL+"/api/v1/task_type", wrapper.GetTaskType)
	router.POST(options.BaseURL+"/api/v1/task_type", wrapper.CreateTaskType)
	router.DELETE(options.BaseURL+"/api/v1/task_type/:name", wrapper.DeleteTaskType)
	router.GET(options.BaseURL+"/api/v1/task_type/:name", wrapper.GetTaskTypeByName)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZW2/bNhT+KwS3h3bQLKcdtkJPa9etyEOToUmeimBgpGOLjUSqJGXHCPzfBx5SF1t0",
	"7NwKeysCJLZInut3zvmo3NJUlpUUIIymyS3VaQ4lw49/KGAGLjQo+61SsgJlOOBaxbSeS5XZzxnoVPHK",
	"cClo0q1E1CwqoAnVRnExpcuI1hqUYCUMT7Urg1PLiCr4WnMFGU0+9ze2mi7bQ/LqC6TGqvpTKYl2s6I4",
	"ndDk8y39UcGEJvSHuPM49u7Gn0BXUmj4S6qSWQHrDmfMsKHZCkytBAGrjPCMvMhgwurCEK7Jz0cvaUQn",
	"TmBCuTC//tK5x4WBKaiBf6hn6NDlMqIfwJwzff2tnLKLpODa0IhyAyWeuEsdGrdsTWdKscUD/DvHlT32",
	"EQ18nJ9NUe2lj2jcI/w7gXmD01UzU2wob83QVMP0NXHLxPBQG4hoqqQ4qyAdnrYrRFeQRmQiFYEbVlYF",
	"kJ/aH6nI67EOCYUZiIA92kgFBK2CG0hr+5go0HVhgmKuuQi0wpKpa2JysCdlrVIg9iBhGiWH5JQygw3R",
	"sUvkhRQpWHcqUFxmPH0ZkhJusSgl3GNtL10UkgXbuWIlGFCaNOkn8xwEUbUQXEwJ2+iMi9dQ5DwHk4PC",
	"yKBRc6aJrtMUtJ7URbHwMYfeDLmSsgAmEJa9HrHmYSMQw2wkmec8zTs9V1BIMQ0msK6yu6DpljdAc60y",
	"EAs9M30+fHJ7OO6i3saqAWTU1UrPttCc88XWBGS14B4CS/xyT1Th+Z3Gtw8O7g25s9bqhi0kWCDKnyKp",
	"C/HWoRtRaPjBqiQ/yYWTYJ+FqhS0ZtO77Gh2BKtiAgpEGjg+5TMguZxb6OZMZAU0aXJSbW9D+2pVELgx",
	"lgkVxWJr0H1UOqM6G5pAhHJxP7LRdP3hdOIBDF4I/rUGS5nkpC3QB9Alnm0YQvdnEv1KeoQTTf08mSdh",
	"Ar6TPZYs71YOT8DMuS3sdvfQF7vfFpYrY2FYivUNJeOFpRkVN8DK3/WcTaegRlw2fSKhZ+4Zefv3MTkH",
	"VlpFyh7Kjal0Ese9Q8tozYEPSkpDTisQ9vjr0RipAp/wtCnwgqcgNPruFX48Ph/okBUI1y9HUk1jfygu",
	"ORaLAVXq08kZqBm3tR0wLcY9sQ0kN0XfLzSRRnQGSjujj0bj0djKtVpZxWlCX+MjOzRMjhCIWcXj2VGs",
	"YMq18SCROjDDPvkdDSAskND544wm/Xueyyho805miyZRniGxqip8zOIv2sptbovbCGVPAaJgnb0h7as7",
	"/Q5RRtXgWAR2P3T51Xj8ZFY1NDxgkrWlbbsOUXitezLd7nYa0izgpoLUQOZaPVaZrsuSqcUgkXatAYHx",
	"zXoKwfzbm4AmrCiaRrsKgeZq+bzhdvNh6DS2zf0M91rcLFMOVpiDOGFEwDwcYrejjfLTV1k7gDcE2EjC",
	"ssz+saMBbzjfut4ODgDDtFoE1A8CwAXS+O8AOHQArDXd2F7r4lv7e7m9AfuL6IL4y2CwDb9bfHSr3eUb",
	"2evaNU5mgETP53YCJs2p5Vh4bTd5x5+8stVUR73QrTO7y+8wCA+C1fwNsHBrA750+S/ABOj0e3zeE+S5",
	"9SoQ3C7fK+5EwQkrd0WB13QYKHDxy/YJBOHULaNdSz6Y6bbkT5p/avwPk30YJe/SvVby/xj/kmEn4t28",
	"HAhiwL8tfO4suBccmzjCooKDoOIukrvz8XDkO1LeBv/ZeNn2uO8JQTtMgGzIeLBe7z2n0evtw9qD6B49",
	"3Kf9wBr5doTs/fheyeiOM/xOFPRC85Bh/l8FwgGM9lUo4FZQs3DS3sMMClmVIAxxuwbviY9e/TYaj8aj",
	"o+TN+M3Y9x66vFz+GwAA//9ZvhXsayMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
